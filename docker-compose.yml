# YouTube Translator Docker Compose 설정
# 개발 및 프로덕션 환경 모두 지원

version: '3.8'

services:
  # ===========================
  # 웹 애플리케이션
  # ===========================
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-translator-web
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DEBUG=${DEBUG:-False}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://${DB_USER:-ytuser}:${DB_PASSWORD:-ytpass}@postgres:5432/${DB_NAME:-youtube_translator}
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    volumes:
      - ./app:/app/app  # 개발 모드에서 코드 변경 반영
      - ./logs:/app/logs
    networks:
      - youtube-translator-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================
  # Redis (캐싱)
  # ===========================
  redis:
    image: redis:7-alpine
    container_name: youtube-translator-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - youtube-translator-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ===========================
  # PostgreSQL (데이터베이스)
  # ===========================
  postgres:
    image: postgres:16-alpine
    container_name: youtube-translator-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-ytuser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-ytpass}
      - POSTGRES_DB=${DB_NAME:-youtube_translator}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - youtube-translator-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ytuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================
  # Nginx (리버스 프록시) - 프로덕션용
  # ===========================
  nginx:
    image: nginx:alpine
    container_name: youtube-translator-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./app/static:/usr/share/nginx/html/static:ro
    depends_on:
      - web
    networks:
      - youtube-translator-network
    profiles:
      - production

  # ===========================
  # 모니터링 - Prometheus (선택사항)
  # ===========================
  prometheus:
    image: prom/prometheus:latest
    container_name: youtube-translator-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - youtube-translator-network
    profiles:
      - monitoring

  # ===========================
  # 모니터링 - Grafana (선택사항)
  # ===========================
  grafana:
    image: grafana/grafana:latest
    container_name: youtube-translator-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - youtube-translator-network
    profiles:
      - monitoring

# ===========================
# 볼륨 정의
# ===========================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ===========================
# 네트워크 정의
# ===========================
networks:
  youtube-translator-network:
    driver: bridge

# ===========================
# 사용법
# ===========================
# 개발 환경:
#   docker-compose up -d
#
# 프로덕션 환경:
#   docker-compose --profile production up -d
#
# 모니터링 포함:
#   docker-compose --profile monitoring up -d
#
# 전체 스택:
#   docker-compose --profile production --profile monitoring up -d
#
# 로그 확인:
#   docker-compose logs -f web
#
# 정리:
#   docker-compose down -v
